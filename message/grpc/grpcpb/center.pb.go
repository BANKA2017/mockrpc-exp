// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: center.proto

package grpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MockJSONRPCError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64   `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *string `protobuf:"bytes,3,opt,name=Data,proto3,oneof" json:"Data,omitempty"`
}

func (x *MockJSONRPCError) Reset() {
	*x = MockJSONRPCError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockJSONRPCError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockJSONRPCError) ProtoMessage() {}

func (x *MockJSONRPCError) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockJSONRPCError.ProtoReflect.Descriptor instead.
func (*MockJSONRPCError) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{0}
}

func (x *MockJSONRPCError) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MockJSONRPCError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MockJSONRPCError) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type MockJSONRPCMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string            `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Params []string          `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty"`
	ID     string            `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	Error  *MockJSONRPCError `protobuf:"bytes,4,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	// Types that are assignable to Data:
	//
	//	*MockJSONRPCMessage_BoolStatus
	//	*MockJSONRPCMessage_Server
	//	*MockJSONRPCMessage_WebRTC
	Data isMockJSONRPCMessage_Data `protobuf_oneof:"Data"`
}

func (x *MockJSONRPCMessage) Reset() {
	*x = MockJSONRPCMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockJSONRPCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockJSONRPCMessage) ProtoMessage() {}

func (x *MockJSONRPCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockJSONRPCMessage.ProtoReflect.Descriptor instead.
func (*MockJSONRPCMessage) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{1}
}

func (x *MockJSONRPCMessage) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MockJSONRPCMessage) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MockJSONRPCMessage) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MockJSONRPCMessage) GetError() *MockJSONRPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (m *MockJSONRPCMessage) GetData() isMockJSONRPCMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MockJSONRPCMessage) GetBoolStatus() bool {
	if x, ok := x.GetData().(*MockJSONRPCMessage_BoolStatus); ok {
		return x.BoolStatus
	}
	return false
}

func (x *MockJSONRPCMessage) GetServer() *ServerStatusQuery {
	if x, ok := x.GetData().(*MockJSONRPCMessage_Server); ok {
		return x.Server
	}
	return nil
}

func (x *MockJSONRPCMessage) GetWebRTC() *WebRTC {
	if x, ok := x.GetData().(*MockJSONRPCMessage_WebRTC); ok {
		return x.WebRTC
	}
	return nil
}

type isMockJSONRPCMessage_Data interface {
	isMockJSONRPCMessage_Data()
}

type MockJSONRPCMessage_BoolStatus struct {
	BoolStatus bool `protobuf:"varint,5,opt,name=BoolStatus,proto3,oneof"`
}

type MockJSONRPCMessage_Server struct {
	Server *ServerStatusQuery `protobuf:"bytes,8,opt,name=Server,proto3,oneof"`
}

type MockJSONRPCMessage_WebRTC struct {
	WebRTC *WebRTC `protobuf:"bytes,11,opt,name=WebRTC,proto3,oneof"`
}

func (*MockJSONRPCMessage_BoolStatus) isMockJSONRPCMessage_Data() {}

func (*MockJSONRPCMessage_Server) isMockJSONRPCMessage_Data() {}

func (*MockJSONRPCMessage_WebRTC) isMockJSONRPCMessage_Data() {}

type ICECandidateInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate        string  `protobuf:"bytes,1,opt,name=Candidate,proto3" json:"Candidate,omitempty"`
	SDPMid           *string `protobuf:"bytes,2,opt,name=SDPMid,proto3,oneof" json:"SDPMid,omitempty"`
	SDPMLineIndex    *uint32 `protobuf:"varint,3,opt,name=SDPMLineIndex,proto3,oneof" json:"SDPMLineIndex,omitempty"`
	UsernameFragment *string `protobuf:"bytes,4,opt,name=UsernameFragment,proto3,oneof" json:"UsernameFragment,omitempty"`
}

func (x *ICECandidateInit) Reset() {
	*x = ICECandidateInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICECandidateInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidateInit) ProtoMessage() {}

func (x *ICECandidateInit) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidateInit.ProtoReflect.Descriptor instead.
func (*ICECandidateInit) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{2}
}

func (x *ICECandidateInit) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *ICECandidateInit) GetSDPMid() string {
	if x != nil && x.SDPMid != nil {
		return *x.SDPMid
	}
	return ""
}

func (x *ICECandidateInit) GetSDPMLineIndex() uint32 {
	if x != nil && x.SDPMLineIndex != nil {
		return *x.SDPMLineIndex
	}
	return 0
}

func (x *ICECandidateInit) GetUsernameFragment() string {
	if x != nil && x.UsernameFragment != nil {
		return *x.UsernameFragment
	}
	return ""
}

type WebRTC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	SDP          string            `protobuf:"bytes,2,opt,name=SDP,proto3" json:"SDP,omitempty"`
	IceCandidate *ICECandidateInit `protobuf:"bytes,3,opt,name=IceCandidate,proto3,oneof" json:"IceCandidate,omitempty"`
}

func (x *WebRTC) Reset() {
	*x = WebRTC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTC) ProtoMessage() {}

func (x *WebRTC) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTC.ProtoReflect.Descriptor instead.
func (*WebRTC) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{3}
}

func (x *WebRTC) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebRTC) GetSDP() string {
	if x != nil {
		return x.SDP
	}
	return ""
}

func (x *WebRTC) GetIceCandidate() *ICECandidateInit {
	if x != nil {
		return x.IceCandidate
	}
	return nil
}

type OnlyBooleanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *OnlyBooleanResult) Reset() {
	*x = OnlyBooleanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyBooleanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyBooleanResult) ProtoMessage() {}

func (x *OnlyBooleanResult) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyBooleanResult.ProtoReflect.Descriptor instead.
func (*OnlyBooleanResult) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{4}
}

func (x *OnlyBooleanResult) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ServerStatusQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendCount      int64 `protobuf:"varint,1,opt,name=SendCount,proto3" json:"SendCount,omitempty"`
	ActiveCount    int64 `protobuf:"varint,2,opt,name=ActiveCount,proto3" json:"ActiveCount,omitempty"`
	DoneCount      int64 `protobuf:"varint,3,opt,name=DoneCount,proto3" json:"DoneCount,omitempty"`
	FailedCount    int64 `protobuf:"varint,4,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`
	GoroutineCount int64 `protobuf:"varint,5,opt,name=GoroutineCount,proto3" json:"GoroutineCount,omitempty"`
	Interval       int64 `protobuf:"varint,6,opt,name=Interval,proto3" json:"Interval,omitempty"`
	DataUsage      int64 `protobuf:"varint,7,opt,name=DataUsage,proto3" json:"DataUsage,omitempty"`
	RequestCost    int64 `protobuf:"varint,8,opt,name=RequestCost,proto3" json:"RequestCost,omitempty"`
	StartAt        int64 `protobuf:"varint,9,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
}

func (x *ServerStatusQuery) Reset() {
	*x = ServerStatusQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusQuery) ProtoMessage() {}

func (x *ServerStatusQuery) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusQuery.ProtoReflect.Descriptor instead.
func (*ServerStatusQuery) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{5}
}

func (x *ServerStatusQuery) GetSendCount() int64 {
	if x != nil {
		return x.SendCount
	}
	return 0
}

func (x *ServerStatusQuery) GetActiveCount() int64 {
	if x != nil {
		return x.ActiveCount
	}
	return 0
}

func (x *ServerStatusQuery) GetDoneCount() int64 {
	if x != nil {
		return x.DoneCount
	}
	return 0
}

func (x *ServerStatusQuery) GetFailedCount() int64 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *ServerStatusQuery) GetGoroutineCount() int64 {
	if x != nil {
		return x.GoroutineCount
	}
	return 0
}

func (x *ServerStatusQuery) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ServerStatusQuery) GetDataUsage() int64 {
	if x != nil {
		return x.DataUsage
	}
	return 0
}

func (x *ServerStatusQuery) GetRequestCost() int64 {
	if x != nil {
		return x.RequestCost
	}
	return 0
}

func (x *ServerStatusQuery) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

type ServerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerStatusResponse) Reset() {
	*x = ServerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_center_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusResponse) ProtoMessage() {}

func (x *ServerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_center_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusResponse) Descriptor() ([]byte, []int) {
	return file_center_proto_rawDescGZIP(), []int{6}
}

var File_center_proto protoreflect.FileDescriptor

var file_center_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x6d, 0x70, 0x72, 0x6f, 0x22, 0x62, 0x0a, 0x10, 0x4d, 0x6f, 0x63, 0x6b, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x99, 0x02, 0x0a, 0x12, 0x4d, 0x6f,
	0x63, 0x6b, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x6d, 0x70, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x4a, 0x53, 0x4f, 0x4e,
	0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x42, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6d, 0x70, 0x72, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6d, 0x70,
	0x72, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x48, 0x00, 0x52, 0x06, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x44, 0x50, 0x4d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x53, 0x44, 0x50, 0x4d,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x53, 0x44, 0x50, 0x4d, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d,
	0x53, 0x44, 0x50, 0x4d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x44, 0x50, 0x4d, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x53, 0x44, 0x50, 0x4d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x44, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x53, 0x44, 0x50, 0x12, 0x40, 0x0a, 0x0c, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6d, 0x70,
	0x72, 0x6f, 0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x49, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x6f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x09, 0x5a, 0x07, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_center_proto_rawDescOnce sync.Once
	file_center_proto_rawDescData = file_center_proto_rawDesc
)

func file_center_proto_rawDescGZIP() []byte {
	file_center_proto_rawDescOnce.Do(func() {
		file_center_proto_rawDescData = protoimpl.X.CompressGZIP(file_center_proto_rawDescData)
	})
	return file_center_proto_rawDescData
}

var file_center_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_center_proto_goTypes = []interface{}{
	(*MockJSONRPCError)(nil),     // 0: tmpro.MockJSONRPCError
	(*MockJSONRPCMessage)(nil),   // 1: tmpro.MockJSONRPCMessage
	(*ICECandidateInit)(nil),     // 2: tmpro.ICECandidateInit
	(*WebRTC)(nil),               // 3: tmpro.WebRTC
	(*OnlyBooleanResult)(nil),    // 4: tmpro.OnlyBooleanResult
	(*ServerStatusQuery)(nil),    // 5: tmpro.ServerStatusQuery
	(*ServerStatusResponse)(nil), // 6: tmpro.ServerStatusResponse
}
var file_center_proto_depIdxs = []int32{
	0, // 0: tmpro.MockJSONRPCMessage.Error:type_name -> tmpro.MockJSONRPCError
	5, // 1: tmpro.MockJSONRPCMessage.Server:type_name -> tmpro.ServerStatusQuery
	3, // 2: tmpro.MockJSONRPCMessage.WebRTC:type_name -> tmpro.WebRTC
	2, // 3: tmpro.WebRTC.IceCandidate:type_name -> tmpro.ICECandidateInit
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_center_proto_init() }
func file_center_proto_init() {
	if File_center_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_center_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockJSONRPCError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockJSONRPCMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICECandidateInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyBooleanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_center_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_center_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_center_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MockJSONRPCMessage_BoolStatus)(nil),
		(*MockJSONRPCMessage_Server)(nil),
		(*MockJSONRPCMessage_WebRTC)(nil),
	}
	file_center_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_center_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_center_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_center_proto_goTypes,
		DependencyIndexes: file_center_proto_depIdxs,
		MessageInfos:      file_center_proto_msgTypes,
	}.Build()
	File_center_proto = out.File
	file_center_proto_rawDesc = nil
	file_center_proto_goTypes = nil
	file_center_proto_depIdxs = nil
}
